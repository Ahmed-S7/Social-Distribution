# Generated by Django 5.2.3 on 2025-06-18 05:27

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RemotePost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('origin', models.URLField()),
                ('author', models.CharField(max_length=100)),
                ('content', models.TextField()),
                ('received_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('is_deleted', models.BooleanField(default=False)),
                ('type', models.CharField(default='author')),
                ('id', models.URLField(primary_key=True, serialize=False, unique=True)),
                ('host', models.URLField(default='http://s25-project-white/api/')),
                ('displayName', models.CharField(max_length=150)),
                ('github', models.URLField(blank=True, default=None, null=True)),
                ('serial', models.UUIDField(default=uuid.uuid4, null=True, unique=True)),
                ('profileImage', models.URLField(blank=True, default='https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y', null=True)),
                ('web', models.URLField(blank=True, default=None)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Entry',
            fields=[
                ('is_deleted', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='entry_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('id', models.URLField(primary_key=True, serialize=False, unique=True)),
                ('serial', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wiki.author')),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='wiki.entry')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InboxItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('type', models.CharField(choices=[('Follow', 'follow'), ('like', 'Like'), ('comment', 'Comment')], default=None, max_length=20)),
                ('content', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inbox', to='wiki.author')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('title', models.CharField(max_length=100, unique=True)),
                ('content', models.TextField()),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wiki.author')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AuthorFollowing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('summary', models.CharField(default='<django.db.models.fields.related.ForeignKey> has followed <django.db.models.fields.related.ForeignKey>')),
                ('date_followed', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to='wiki.author')),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='wiki.author')),
            ],
            options={
                'constraints': [models.UniqueConstraint(condition=models.Q(('is_deleted', False)), fields=('follower', 'following'), name='unique_active_following')],
            },
        ),
        migrations.CreateModel(
            name='AuthorFriend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('friended_at', models.DateTimeField(auto_now_add=True)),
                ('friended', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_b', to='wiki.author')),
                ('friending', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend_a', to='wiki.author')),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('friending', 'friended'), name='unique_friendship_pair')],
            },
        ),
        migrations.CreateModel(
            name='FollowRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('type', models.CharField(default='follow')),
                ('summary', models.CharField(default='You have recieved a follow request!')),
                ('state', models.CharField(choices=[('requesting', 'Requesting'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='requesting', max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('requested_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_requests', to='wiki.author')),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requesting', to='wiki.author')),
            ],
            options={
                'constraints': [models.UniqueConstraint(condition=models.Q(('is_deleted', False)), fields=('requester', 'requested_account', 'state'), name='unique_active_follow_request')],
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='wiki.entry')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wiki.author')),
            ],
            options={
                'unique_together': {('entry', 'user')},
            },
        ),
    ]
